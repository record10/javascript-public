"use strict";(self.webpackChunkjavascript=self.webpackChunkjavascript||[]).push([[509],{509:(e,s,t)=>{t.r(s),t.d(s,{title:()=>c,story:()=>a});const c="String",a='\n<div>\n    <div class="section">\n        <b>Declaration</b>\n        <hr>\n        <code>\n            const title = "This is valid string";\n            <br>\n            const title = \'This is valid string\';\n            <br>\n            const title = `This is also valid string`;\n            <hr>\n            <pre>\nconst title = `This is <br> also valid <br> string`; <code class="text-success">// ` ` symbol is used for multiline string</code>\n            </pre> \n        </code>\n    </div>\n\n    <div class="section">\n        <b>Methods on string</b>\n        <hr>\n        <code>\n            \'cat\'.charAt(1) <span class="text-success">// returns "a"</span>\n            <br>\n            \'cat\'[2] <span class="text-success">// returns "a"</span>\n            <br>\n            \'cat\'.indexOf(\'a\') <span class="text-success">// returns 1</span>\n            <br>\n            \'cat\'.lastIndexOf(\'a\') <span class="text-success">// returns 3</span>\n            <br>\n            \'cat\'.slice(1) <span class="text-success">// returns "at"</span>\n            <br>\n            \'cat\'.slice(1, 3) <span class="text-success">// returns "at"</span>\n            <br>\n            \'cat\'.substring(1, 3) <span class="text-success">// returns "at"</span>\n            <br>\n            \'cat\'.substr(1, 3) <span class="text-success">// returns "at"</span>\n            <br>\n            \'cat\'.replace(\'cat\', \'dog\') <span class="text-success">// returns "dog"</span>           \n        </code>\n    </div>\n\n    </div>\n    '}}]);